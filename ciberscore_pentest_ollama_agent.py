import asyncio
import logging
import textwrap
import json
from langchain_ollama.chat_models import ChatOllama
from mcp_use import MCPAgent, MCPClient
OLLAMA_URL = "http://127.0.0.1:11434/"  # change if using different LLM
MCP_SERVER = "/home/csai/autopentest_module/hexstrike-ai-fork/hexstrike_mcp.py"
CONFIG = {}
with open('hexstrike-ai-mcp.json') as json_file:
    CONFIG = json.load(json_file)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
SYSTEM_INSTRUCTION = textwrap.dedent("""
You are an autonomous pentest agent. Your target is {target}, and you have explicit permission for evaluating it.

Apply the reconnaissance step of a pentesting using the available tools. If do you discover some vulnerability, try to exploit it with the available tools, but without making the service to go down.

Always use a tool if available instead of doing it on your own.
""").strip()

async def run_agent(target: str, model="qwen3:32b"): #ollama + deepseek does not support tools by now...
    cli = MCPClient.from_dict(CONFIG)
    llm = ChatOllama(model=model, base_url=OLLAMA_URL)
    agent = MCPAgent(llm=llm, client=cli, max_steps=120)
    initial_prompt = SYSTEM_INSTRUCTION.format(target=target)
    result = await agent.run(initial_prompt)
    await cli.close_all_sessions()
    return result


def start_pentest(target: str):
    result = asyncio.run(run_agent(target))
    logger.info(result)
    return result