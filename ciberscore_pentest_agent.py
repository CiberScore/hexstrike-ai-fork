import asyncio
import json
import logging

from fastmcp import Client
from transformers import pipeline

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("hex-agent")

MODEL_NAME = "suryanshp1/Llama-3.1-8B-kali-pentester"  # In future releases, this must be changed for a more expert model

gen = pipeline("text-generation", model=MODEL_NAME, device_map="auto")

def decide_action_prompt(tools_list, user_goal):
    prompt = (
        "You are an autonomous pentest agent. The available tools are:\n"
        + "\n".join(f"- {t.name}: {t.description or 'no-desc'}" for t in tools_list)
        + "\n\nTask: " + user_goal + "\n\n"
        "Return a strict JSON object with fields: {\"tool\": \"tool_name\", \"args\": {...}}\n"
        "If multiple actions are required, pick one tool and its args now.\n"
        "Only output the JSON."
    )
    return prompt

def decide_action(tools_list, user_goal):
    prompt = decide_action_prompt(tools_list, user_goal)
    resp = gen(prompt, max_new_tokens=25000, do_sample=False)[0]["generated_text"]
    start = resp.find("{")
    end = resp.rfind("}") + 1
    if start == -1 or end == -1:
        raise RuntimeError("LLM did not return JSON. Raw: " + resp[:200])
    j = json.loads(resp[start:end])
    return j

# ---- MCP client loop ----
async def run_agent(mcp_url="http://127.0.0.1:1234", user_goal="Perform a fast TCP port scan on example.com"):
    client = Client(mcp_url)
    async with client:
        tools = await client.list_tools()
        class T: pass
        tl = []
        for t in tools:
            o = T()
            o.name = t.name
            o.description = getattr(t, "description", "")
            tl.append(o)

        logger.info("Asking LLM which tool to use...")
        plan = decide_action(tl, user_goal)
        logger.info("Plan from LLM: %s", plan)

        tool_name = plan["tool"]
        args = plan.get("args", {})

        logger.info("Calling tool %s with args %s", tool_name, args)
        result = await client.call_tool(tool_name, args)
        logger.info("Tool result: %s", result.data if hasattr(result, "data") else str(result))

if __name__ == "__main__":
    asyncio.run(run_agent(user_goal="Perform a pentest on https://pentest-ground.com:4280"))
